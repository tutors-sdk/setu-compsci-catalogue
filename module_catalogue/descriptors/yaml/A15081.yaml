aim: The objective of this module is to provide students with the understanding of
  techniques and methods used to develop reliable quality software. Students will
  also research, experiment and utilize various tools in order to explore the typical
  activities of modern software engineering practices. These tools will also be used
  to deliver a small software application.
assessment criteria:
- '<40%: Unable to interpret and describe key concepts of software engineering practices.'
- '40%-49%: Be able to interpret and describe key concepts of software engineering
  practices.'
- '50%-59%: Ability to discuss key concepts of software engineering and the ability
  to discover and integrate related knowledge in other knowledge domains.'
- '60%-69%: Be able to solve problems within software engineering by experimenting
  with the appropriate skills and tools.'
- '70%-100%: All the above to an excellent level. Be able to analyse and design solutions
  to a high standard for a range of both complex and unforeseen problems through the
  use and modification of appropriate skills and tools.'
assessment methods:
- learning outcomes: ''
  main: true
  name: Continuous Assessment
  weighting: 100
- learning outcomes: 2,3,4,5,6
  main: false
  name: Group Project
  weighting: 60
- learning outcomes: 1,2,3,7
  main: false
  name: In-Class Assessment
  weighting: 40
basename: A15081_-_CaM_-_InfoSystandMode_-_Software_Engineering_Practice
co-requisites: []
code: A15081
credits: 5
department: Computing and Mathematics
dirty: false
essential material: []
full title: Software Engineering Practice
indicative content:
- Project Management
- Software Processes
- Requirements Elicitation & Modelling
- Automated Project Build and Testing
- Continuous Integration & Deployment
- Project Scaffolding Tools
learning and teaching methods:
- This module will be presented using a combination of lectures and practical classes.
- The lectures will be used to introduce new topics and their related concepts.
- The lab-based practicals, building on the theoretical knowledge from lectures, provide
  exposure to the automation tools and practical skills required to support a project
  life-cycle.
- The practical content will use industry standard technologies, tools and techniques.
- Students will be encouraged to enhance their lab work and assessment submissions
  using self-directed research into state-of-the-art of software engineering practices.
learning modes:
- full time: 12
  name: Lecture
  part time: ''
- full time: 36
  name: Practical
  part time: ''
- full time: 87
  name: Independent Learning
  part time: ''
learning outcomes:
- Compare different software processes and select a suitable process for the design
  of a particular software system.
- Explain the importance of project planning and create a project workflow using appropriate
  tools.
- Describe software requirements and illustrate the processes involved in discovering
  these requirements.
- Demonstrate an understanding of the different models and activities in the object
  oriented design process.
- Design and automate an appropriate test driven strategy for a software development
  project.
- Operate a Continuous Integration (CI) practice in collaborative software projects.
- Illustrate the advantages of Continuous Delivery (CD).
level: Introductory
pre-requisites: []
programmes:
- null
- null
- null
- programme: WD_KCOFO_B
  semester: 4
  stage: 2
  status: M
  timetable: COMP-0640
  title: Bachelor of Science (Honours) in Computer Forensics and Security
- programme: WD_KCOMP_B
  semester: 4
  stage: 2
  status: M
  timetable: COMP-0640
  title: Bachelor of Science (Honours) in Applied Computing
requested resources:
- 'Room Type: Computer Lab'
short title: Software Engineering Practice
supplementary material:
- '"Continuous Delivery." https://www.thoughtworks.com/continuous-delivery. https://www.thoughtworks.com/continuous-delivery'
- 'Pressman, R. and B.R. Maxim. \emph{Software Engineering: A Practitioner''s Approach}.
  8th. New York: McGraw-Hill Higher Education, 2014.'
- 'Sommerville, I. \emph{Software Engineering}. 10th. Boston: Pearson, 2015.'
