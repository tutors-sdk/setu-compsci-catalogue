aim: This module will introduce the student to fundamental programming techniques.
  The student will learn how to design algorithms using pseudocode, write small applications
  based on their designs and test their written applications. It assumes no prior
  knowledge of technology, programming languages or programming environments. Using
  basic techniques, the student should gain confidence in producing small applications.
  The module will alsofurther develop the thought processes, problem solving techniques
  and programming structures essential for developing larger systems responsible for
  more complex tasks. The module will focus on developing maintainable, robust, persistent
  applications that are consistent with user experience (UX) best practice.
assessment criteria:
- '<40%: Inability to design, develop and test maintainable, persistent, robust UX
  applications to solve a particular problem.'
- '40%-49%: Ability to design, develop and test maintainable, persistent, robust UX
  applications to solve a straight-forward problem.'
- '50%-59%: Comfortable with designing, developing and testing maintainable, persistent,
  robust UX applications to solve problems similar to those presented in the module.'
- '60%-69%: Proficient with designing, developing and testing maintainable, persistent,
  robust, high-quality UX applications to solve complex problems.'
- '70%-100%: Proficient with designing, developing and testing maintainable, persistent,
  robust, high-quality, elegant UX applications to solve complex problems that are
  substantially different to those studied in the module.'
assessment methods:
- learning outcomes: ''
  main: true
  name: Continuous Assessment
  weighting: 100
- learning outcomes: 1,2,3
  main: false
  name: Assignment
  weighting: 30
- learning outcomes: 3,4,5,6
  main: false
  name: Assignment
  weighting: 35
- learning outcomes: 5,6,7,8,9,10,11
  main: false
  name: Assignment
  weighting: 35
basename: A14167_-_CaM_-_SoftandWebDeve_-_Programming_Fundamentals_-_ICT
co-requisites: []
code: A14167
credits: 10
department: Computing and Mathematics
dirty: false
essential material: []
full title: Programming Fundamentals - ICT
indicative content:
- Problem solving approaches
- Control structures for programming
- Programming language constructs
- UX approaches using data-entry validation and error recovery
- Hands-on debugging, testing and documentation activities
- Use of innovative visualisation tools, IDEs and frameworks
- Introduction to industry accepted standards specific to the programming language
- Use of complex constructs and data structures associated with the chosen language
- Introduction to UX
- Programming for persistence
- Programming techniques for well-behaved, robust applications
- Read, understand and consume API specific to the chosen language
- Use of innovative visualisation tools, IDEs and frameworks
learning and teaching methods:
- Combination of lectures and computer-based practical labs.
- Cooperative learning/peer tutoring (i.e. pair-programming for some practical labs,
  Problem-based learning approaches for some assignments).
- Self-directed learning.
learning modes:
- full time: 48
  name: Lecture
  part time: ''
- full time: 48
  name: Practical
  part time: ''
- full time: 174
  name: Independent Learning
  part time: ''
learning outcomes:
- Apply core problem solving approaches suitable to the programming discipline to
  build algorithms.
- Construct small applications using standard sequence, conditional and iterative
  control structures.
- Change and expand small applications.
- Construct small applications that use simple UI, computation and data structures.
- Apply techniques to effectively test, debug and document small applications.
- Defend and explain how the above applications work.
- Apply problem-solving strategies to various computing problems of increasing complexity.
- Plan, code, test and document applications using advanced programming constructs
  and data structures.
- Construct applications consistent with UX best practice.
- Construct persistent applications.
- Apply maintainability and robustness when designing applications.
level: Introductory
pre-requisites: []
programmes:
- dirty: true
  programme: WD_KCOSC_G
  semester: 1
  stage: 1
  status: M
  timetable: COMP-0516
  title: Higher Diploma in Science in Computer Science
requested resources:
- 'COMPUTER LAB: BYOD Lab'
short title: Programming Fundamentals - ICT
supplementary material:
- 'Kolling, M. \emph{Objects first with Java-A Practical Introduction using BlueJ.
  5th ed..}. New York: Pearson Education, 2012.'
- 'Sprankle, M. \emph{Problem Solving and Programming Concepts}. New York: Prentice
  Hall, 2011.'
