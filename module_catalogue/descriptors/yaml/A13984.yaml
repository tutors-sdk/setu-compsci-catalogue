aim: The module introduces the students to the fundamental concepts and techniques
  in graph theory and network based combinatorial optimisation, focusing on the relationships
  between algorithms and associated data structures. The module also includes discussions
  of applications to problems from computing, engineering, and operations research
  thus illustrating the broad applicability of the theory.
assessment criteria:
- '<40%: Inability to demonstrate knowledge or understanding of the concepts outlined
  in the syllabus content, inability to apply concepts to selected problems.'
- '40%-59%: Able to demonstrate a basic understanding of the fundamental concepts
  outlined in syllabus content. Able to find the solution set to basic problems, and
  in addition, able to supply a reasonable interpretation of generated results.'
- '60%-69%: All the above, in addition be able to independently determine appropriate
  mathematical techniques to analyse applied problems and to express their work with
  rigour and precision.'
- '70%-100%: All the above to an excellent level. Demonstrates an ability to put a
  solution into a context and assess whether such solutions are meaningful.'
assessment methods:
- learning outcomes: 1,2,3
  main: true
  name: Final Written Examination
  weighting: 50
- learning outcomes: 4,5
  main: true
  name: Continuous Assessment
  weighting: 50
- learning outcomes: '4'
  main: false
  name: Assignment
  weighting: 20
- learning outcomes: '5'
  main: false
  name: Assignment
  weighting: 30
basename: A13984_-_CaM_-_MathandPhys_-_Graph_Theory_and_Optimisation
co-requisites: []
code: A13984
credits: 10
department: Computing and Mathematics
dirty: false
essential material:
- 'Wilson, R. \emph{Introduction to Graph Theory}. London: Pearson, 2012.'
full title: Graph Theory and Optimisation
indicative content:
- 'Algorithmic Complexity: order notation; analysis of algorithms; greedy heuristics
  and approximate algorithms; classification of decision problems; complexity classes
  of P, NP and Co-NP. NP-completeness; NP-hardness'
- 'Optimal Routes in Graphs: DFS, BFS and hybrid traversal; applications of shortest
  routes in graphs; methods of Dijkstra and of Floyd; applications of longest routes
  in directed acyclic graphs'
- 'Minimum Spanning Trees: applications of trees and of rooted trees; properties of
  rooted trees and of m-ary trees (with binary trees as a special case); metermination
  of minimum spanning trees by Kruskal''s, Prim''s and Boruvka''s methods; analysis
  of MST algorithms'
- 'Planarity: Euler''s formula; applications of graph planarity with respect to optimal
  facility lay-outs; Kuratowski''s theorem; crossing numbers of graphs embedded in
  the plane'
- 'Centres and Medians: vertex eccentricity; radius and diameter of a graph; graph
  centre and a graph median; applications to optimal facility placement in communication
  networks'
- 'Vertex and Edge Colourings: vertex and edge chromatic numbers; heuristic methods
  for graph colourings; applications of vertex & edge colourings with respect to scheduling'
- 'Eulerian Graphs: the Knigsberg bridge problem; Chinese postman problem and variants;
  DeBruijn sequences and gray codes; application to model based testing'
- 'Hamiltonian Graphs: the travelling salesman problem (TSP); heuristics for the travelling
  salesman problem (such as the method of nearest neighbours and Christofides'' method
  of cheapest insertion); post- optimisation methods for the travelling salesman problem
  (such as 2-opt)'
- 'Network Flow: The matching problem; matching and augmenting paths; the network
  flow problem; assignment problem, weighted edge cover problem; multi-comodity flow
  problem'
- 'Social Networks: power-law networks; the small-world phenomenon; navigation in
  social networks; sampling of network properties; generation of networks; the Erdos
  Renyi model'
- 'Emerging Topics: dynamic graph algorithms; clustering and topology trees; randomised
  algorithms; graph drawing algorithm; on-line algorithms: paging scheduling and load
  balancing'
learning and teaching methods:
- Delivery of the module will be through lectures and computer based practicals.
- The lectures will develop theory, lead students through worked examples and introduce
  the context for the module material.
- The practical sessions will be used to discuss applications of the theory and will
  involve applying a number of problems and algorithms discussed during the course,
  as well as a practical implementation of the relevant data-structures. This way
  the students get practical, hands-on experience with techniques from graph theory
  and combinatorial optimisation.
- Given the level of mathematical notation and concepts used in the module, it is
  advisable that a student has basic programming skills (graduate of a BSc or BEng
  involving significant programming experience) and at least a moderate mathematical
  ability (at least one year of undergraduate mathematics), in particular, basic linear
  algebra (including eigenvalues and eigenvectors) and an understanding of simple
  combinatorial counting processes involving permutations and combinations.
learning modes:
- full time: 24
  name: Lecture
  part time: 24
- full time: 24
  name: Practical
  part time: 24
- full time: 222
  name: Independent Learning
  part time: 222
learning outcomes:
- Interpret complexity classes (in particular P vs NP), completeness and hardness,
  and the relationships between classes by reduction.
- Interpret the theory underlying exact and heuristic approaches to combinatorial
  optimisation problems.
- Prove and interpret standard results in graph theory.
- Develop, implement, and critically evaluate the correctness and performance of standard
  graph and combinatorial optimisation algorithms.
- Select and implement appropriate formulations and algorithms from graph theory and
  combinatorial optimisation to analyse problems from computing, engineering, and
  operations research.
level: Postgraduate
pre-requisites: []
programmes:
- null
- dirty: true
  programme: WD_KISYP_R
  semester: 0
  stage: 1
  status: E
  timetable: COMP-0302
  title: Master of Science in Computing (Information Systems Processes)
requested resources:
- 'COMPUTER LAB: BYOD Lab'
short title: Graph Theory and Optimisation
supplementary material:
- '"Algorithmic Graph Theory." http://www.personal.kent.edu/~rmuhamma/GraphTheory/graphTheory.htm'
- '"The Math Forum (Drexel)." http://mathforum.org/library/topics/graph_theory/'
- 'Ammann, P. and J. Offutt. \emph{Introduction to Software Testing}. UK: Cambridge,
  2008.'
- 'Atallah, M. \emph{Algorithms and Theory of Computation Handbook}. NY: CRC Pres,
  1999.'
- 'McHugh, J. \emph{Algorithmic Graph Theory}. NY: Prentice Hall, 1989.'
- 'Sedgewick, R. \emph{Algorithms in Java: Graph Algorithms}. NY: Addison-Wesley,
  2003.'
