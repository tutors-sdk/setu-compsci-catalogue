aim: This module will introduce the student to the functional programming paradigm.
  The student will learn the mathematical basis underlying functional programming
  and then one of the popular languages (e.g. Haskell) and see how it can be applied
  to a variety of domains. The student will be able to apply functional techniques
  in non-functional paradigms when it is helpful to do so and is able to judge when
  this is the case.
assessment criteria:
- <40%:Inability to write correct programs (small and medium) using the functional
  paradigm.
- '40%-49%: Able to write correct programs (small and medium) using the functional
  paradigm.'
- 50%-59%:Above and able to reason correctly about the programs. Can write functional
  code in non-functional languages.
- '60%-69%: All of the above and writes elegant and clear functional code.'
- 70%-100%:All of the above to an excellent level and demonstrates an enthusiasm for
  the functional approach.
assessment methods:
- learning outcomes: 1,2,3,4,5,6
  main: true
  name: Final Written Examination
  weighting: 50
- learning outcomes: ''
  main: true
  name: Continuous Assessment
  weighting: 50
- learning outcomes: 1,4,5,6,7
  main: false
  name: Tutorial/Problem Sheets
  weighting: 10
- learning outcomes: 1,5,6,8
  main: false
  name: Project
  weighting: 40
basename: A13433_-_CaM_-_SoftandWebDeve_-_Functional_Programming
co-requisites: []
code: A13433
credits: 5
department: Computing and Mathematics
dirty: false
essential material: []
full title: Functional Programming
indicative content:
- Introduction to functional programming -- why and when should this paradigm be used
- Types and classes, functions
- Lambda expressions - untyped and typed
- Recursive functions, higher-order functions
- Use of a functional language (e.g Haskell)
- Effect-free programming
- Processing structured data (e.g. trees) via functions
- Use of functional programming techniques in other, non-functional programming languages
  (e.g. Java)
- Current trends in functional programming
learning and teaching methods:
- The material will be delivered using lectures and practicals. The lectures will
  introduce the theory and the practicals will be used to implement the theoretical
  concepts via programming examples.
learning modes:
- full time: 24
  name: Lecture
  part time: ''
- full time: 24
  name: Practical
  part time: ''
- full time: 87
  name: Independent Learning
  part time: ''
learning outcomes:
- Construct simple and more complex programs in a functional programming language
  (e.g. Haskell).
- Construct basic constructs of a functional programming languageusing untyped lambda
  calculus.
- Construct programs using typed lambda calculus.
- Compare and contrast the procedural/functional approach and the object-oriented
  approach.
- Evaluate and reason about variables and lexical scope in a program using function
  closures.
- Construct basic algorithms that avoid assigning to mutable state or considering
  reference equality.
- Construct and use iterators and other operations on aggregates, including operations
  that take functions as arguments, in multiple programming languages, selecting the
  most natural idioms for each language.
- Write functional code in non-functional languages (e.g. Java)
level: Advanced
pre-requisites: []
programmes:
- null
- null
- null
- dirty: true
  programme: WD_KCOFO_B
  semester: 8
  stage: 4
  status: E
  timetable: PROG-0094
  title: Bachelor of Science (Honours) in Computer Forensics and Security
- dirty: true
  programme: WD_KCOMP_B
  semester: 8
  stage: 4
  status: M
  timetable: PROG-0094
  title: Bachelor of Science (Honours) in Applied Computing
requested resources:
- 'COMPUTER LAB: BYOD Lab'
short title: Functional Programming
supplementary material:
- '"Java Software." https://www.oracle.com/java/index.html. https://www.oracle.com/java/index.html'
- 'Hutton, G. \emph{Programming in Haskell}. 1. England: Cambridge University Press,
  2007.'
- 'Khan, A. \emph{Grokking Functional Programming}. 1. America: Manning Publications,
  2016.'
