aim: This module will introduce the student to fundamental programming techniques.
  The student will learn how to design algorithms using pseudocode, write small applications
  based on their designs and test their written applications. It assumes no prior
  knowledge of technology, programming languages or programming environments. Using
  basic techniques, the student should gain confidence in producing small applications.
assessment criteria:
- '<40%: Inability to write, run test and debug small applications. Inability to understand,
  explain the workings of or modify, a small application. Inability to produce an
  algorithm to solve a simple problem.'
- '40%-49%: Able to write, run, test and debug small applications comfortably. Able
  to understand, explain the workings of or modify a small application. Can produce
  an algorithm to solve a simple problem.'
- '50%-59%: All the above and in addition can correctly choose appropriate programming
  constructs and data structures. Shows a high level of competency when writing algorithms.'
- '60%-69%: All the above and in addition, be able to apply given solutions to new,
  similar problems. Starts to use Application Programming Interfaces (APIs) to research
  new capabilities. Starts to see applications in terms of systems of components.'
- '70%-100%: All previous to an excellent level. Starts to understand the concept
  of effective solutions.'
assessment methods:
- learning outcomes: ''
  main: true
  name: Continuous Assessment
  weighting: 100
- learning outcomes: 1,2,3,6
  main: false
  name: Assignment
  weighting: 30
- learning outcomes: 1,2,4,5,6
  main: false
  name: Assignment
  weighting: 70
basename: A06609_-_CaM_-_SoftandWebDeve_-_Programming_Fundamentals_1
co-requisites: []
code: A06609
credits: 5
department: Computing and Mathematics
dirty: false
essential material:
- '"Code Academy." http://www.codecademy.com/'
- '"Khan Academy." https://www.khanacademy.org/'
- '"W3 Schools on-line web tutorials." https://www.w3schools.com/'
full title: Programming Fundamentals 1
indicative content:
- Problem solving approaches
- 'Control structures for programming: sequence; selection; iteration'
- 'Programming language constructs: variables; operators; methods; arrays'
- Classes and objects
- User interaction (UI) approaches using data-entry validation and error recovery
- Hands-on debugging, testing and documentation activities
- Use of innovative visualisation tools, Integrated Development Environments (IDEs)
  and frameworks
- Introduction to industry accepted standards specific to the programming language
learning and teaching methods:
- This module will be presented by a combination of lectures and computer-based practicals
  whilst capitalising on a web-enhanced learning environment.
- The lectures will be used to introduce new topics and their related concepts.
- A cooperative learning/peer tutoring (i.e. pair-programming for some practical labs)
  approach will be adopted during the practical sessions.
- Self-directed learning will be encouraged throughout the duration of the module.
learning modes:
- full time: 24
  name: Lecture
  part time: 12
- full time: 36
  name: Practical
  part time: 12
- full time: 75
  name: Independent Learning
  part time: 111
learning outcomes:
- Apply core problem solving approaches suitable to the programming discipline to
  build algorithms.
- Code small applications using standard sequence, conditional and iterative control
  structures.
- Change and expand small applications.
- Code small applications that use simple UI, computation and data structures.
- Apply techniques to effectively test, debug and document small applications.
- Defend and explain how the above applications work.
level: Introductory
pre-requisites: []
programmes:
- programme: WD_BCSEC_SP
  semester: 1
  stage: 3
  status: M
  timetable: COMP-0008
  title: Diploma in Computing with Security and Forensics
- null
- null
- null
- null
- null
- programme: WD_KCOFO_B
  semester: 1
  stage: 1
  status: M
  timetable: COMP-0008
  title: Bachelor of Science (Honours) in Computer Forensics and Security
- programme: WD_KCOMC_D
  semester: 1
  stage: 1
  status: M
  timetable: COMP-0008
  title: Bachelor of Science in Software Systems Development
- programme: WD_KCOMP_B
  semester: 1
  stage: 1
  status: M
  timetable: COMP-0008
  title: Bachelor of Science (Honours) in Applied Computing
- null
- null
- null
- programme: WD_KINFT_D
  semester: 2
  stage: 1
  status: M
  timetable: COMP-0008
  title: Bachelor of Science in Information Technology
- null
- programme: WD_KPHTE_B
  semester: 3
  stage: 2
  status: M
  timetable: COMP-0008
  title: Bachelor of Science (Honours) in Physics for Modern Technology
requested resources:
- 'Room Type: Computer Lab'
short title: Programming Fundamentals 1
supplementary material:
- '"BlueJ." http://www.bluej.org'
- '"Project Euler." https://projecteuler.net/'
- '"Python Tutorials." http://www.introtopython.org/'
- 'Kolling, M. and D. Barnes. \emph{Objects first with Java - A Practical Introduction
  using BlueJ}. 5th ed.. NY: Pearson, 2012.'
- 'Sprankle, M. \emph{Problem Solving and Programming Concepts}. 9th Ed.. NY: Prentice
  Hall, 2011.'
- 'Venit, S. and E. Drake. \emph{Prelude to Programming: Concepts & Design}. NY: Pearson
  Higher Education, 2015.'
- 'Vickers, P. \emph{How to think like a programmer: problem solving for the bewildered}.
  NY: Cengage, 2008.'
